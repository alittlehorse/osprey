name: CMake-vcpkg

on:
  push:
    branches: [ dev-vcpkg ]
  pull_request:
    branches: [ dev-vcpkg ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  buildDir: '${{ github.workspace }}/build/'
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
#     - uses: actions/checkout@v2
#     - name: Cache Boost
#       uses: actions/cache@v2
#       with:
#         path: '${{ runner.workspace }}/boost_*.tar.gz'
#         key: 'boost-1.75.0'

#     - name: Build Boost
#       # This won't re-download the archive unnecessarily:
#       uses: egor-tensin/build-boost@v1
#       with:
#         version: 1.75.0


    - name: install apt dependency
    # You may pin to the exact commit or the version.
    # uses: LyricWulf/abc@fac86f9a1ed76c6985324639b2f843f845ffb40b
      uses: LyricWulf/abc@v1.1.0
      with:
        # Apt dependencies
        linux: build-essential cmake git libgmp3-dev libprocps-dev python3-markdown libboost-program-options-dev libssl-dev python3 pkg-config python3-dev libevent-dev libfmt-dev
        # Install latest CMake.
        
    - uses: lukka/get-cmake@latest
    # Restore from cache the previously built ports. If cache-miss, download and build vcpkg (aka "bootstrap vcpkg").
    - name: Restore from cache and install vcpkg
      # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
      uses: lukka/run-vcpkg@v7
      with:
        setupOnly: true
        vcpkgArguments: "drogon xbyak boost"
        vcpkgDirectory: ${{ github.workspace }}/vcpkg
        vcpkgGitUrl: 'https://github.com/microsoft/vcpkg.git'
        useShell: true
        vcpkgGitCommitId: 30124253eecff36bc90f73341edbfb4f845e2a1e
        additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed
    # Now that vcpkg is installed, it is being used to run with the desired arguments.
#     - run: |
#         $VCPKG_ROOT/vcpkg install boost:linux-x64 &&
#         $VCPKG_ROOT/vcpkg install drogon:linux-x64 &&
#         $VCPKG_ROOT/vcpkg install xbyak:linux-x64
#       shell: bash

    - name: Run CMake to install the dependencies specified in the vcpkg.json manifest, generate project file and build the project
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        buildDirectory: ${{ env.buildDir }}
        # This input tells run-cmake to consume the vcpkg.cmake toolchain file set by run-vcpkg.
        useVcpkgToolchainFile: true
        buildWithCMake: true
#     - name: run-vcpkg
#       uses: lukka/run-vcpkg@v7.4
#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

#     - name: Build
#       # Build your program with the given configuration
#       run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

#     - name: Test
#       working-directory: ${{github.workspace}}/build
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C ${{env.BUILD_TYPE}}
      
