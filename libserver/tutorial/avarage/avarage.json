{
  "register_count":16,
  "word_size":16,
  "tinyram_input_size_bound": 25,
  "time_bound": 64,
  "tinyram_program_size_bound":20,
  "program":"def fun(data):\n        return 2",
  "verify_program":"; TinyRAM V=2.000 M=vn W=16 K=16\n;;; avarage\n;;; primary input: DATA_HASH\n;;; aux input: DATA\n;;; suppose the aux input is a array which length is 20\n;;; compute the avarage of data,which hash is DATA_HASH\n;;; 1. hash aux input and compare with the DATA_HASH\n;;; 2. avarage the aux inpute and out the result\n\n;;;we just complete the step2 firstly, and the hash function is hard.\nstore.w 0, r0                    ; 0:\nmov r0, 32768                    ; 4:\nread r1, 0                       ; 8: read the first word in the primary word\ncjmp 28                          ; 12: if the flag is 1 ,jump 28\nadd r0, r0, 2                    ; 16:\nstore.w r0, r1                   ; 20:\njmp 8                            ; 24:this prelude can store the primary input in the momery\nstore.w 32768, r0                ; 28: end of prelude. put the data end index in the  32768\nmov r3, 0                        ; 44:r3 is the count index of auxiliary input\nmov r4, 0                        ; 48:r4 is the sum of r2\n_loop:read r2, 1                 ; 36: read auxiliary input in r2 (note that pairs are processed in reverse order)\ncjmp _bail                       ; 40\nadd r3,r3,1                      ; 52:r3 += 1\nadd r4, r4, r2                   ; 56:r4 = r4 + r2\njmp _loop                        ; 60\n_bail: udiv r4,r4,r3             ; 64:r4 = r4/r3\nload.w r1,r0\nsub r4,r4,r1\nanswer r4"
}